package factory_test

import (
	"testing"

	"github.com/danitrod/go-design-patterns/patterns/factory"
	"github.com/stretchr/testify/assert"
)

func TestInterfaceFactory(t *testing.T) {
	oldGreeter := factory.NewGreeter("John", 71)
	youngGreeter := factory.NewGreeter("Carl", 21)

	assert.Contains(t, oldGreeter.SayHello(), "tired")
	assert.Contains(t, youngGreeter.SayHello(), "my name is")
}

func TestFactoryGenerator(t *testing.T) {
	t.Run("Should generate employees using factory generated by functional employee factory", func(t *testing.T) {
		newDev := factory.NewEmployeeFactory("Developer", 1000)

		dev1 := newDev("John")
		dev2 := newDev("Carl")

		assert.Equal(t, "Developer", dev1.Position)
		assert.Equal(t, 1000, dev1.Income)

		assert.Equal(t, "Developer", dev2.Position)
		assert.Equal(t, 1000, dev2.Income)

		assert.NotEqual(t, dev1.Name, dev2.Name)
	})

	t.Run("Should generate employees using structural employee factory", func(t *testing.T) {
		devFactory := factory.NewEmployeeFactoryStructural("Developer", 1000)

		dev1 := devFactory.Create("John")
		dev2 := devFactory.Create("Carl")

		assert.Equal(t, "Developer", dev1.Position)
		assert.Equal(t, 1000, dev1.Income)

		assert.Equal(t, "Developer", dev2.Position)
		assert.Equal(t, 1000, dev2.Income)

		assert.NotEqual(t, dev1.Name, dev2.Name)
	})
}

func TestPrototypeFactory(t *testing.T) {
	dev := factory.NewEmployee("John", factory.Developer)
	mgr := factory.NewEmployee("Carl", factory.Manager)

	assert.Equal(t, "developer", dev.Position)
	assert.Equal(t, 1000, dev.Income)

	assert.Equal(t, "manager", mgr.Position)
	assert.Equal(t, 2000, mgr.Income)

}
